# Generated by Django 4.0.1 on 2022-10-08 07:45

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Book',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bookName', models.CharField(max_length=50)),
                ('bookSerialNumber', models.CharField(max_length=20)),
                ('publisher', models.CharField(max_length=50)),
                ('author', models.CharField(max_length=100)),
                ('yearOfPublish', models.DateField()),
            ],
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('courseName', models.CharField(max_length=200)),
                ('yearOfStudy', models.IntegerField()),
                ('numberOfStudents', models.IntegerField()),
                ('courseCode', models.CharField(max_length=5)),
            ],
        ),
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('departmentName', models.CharField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='Faculty',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('facultyName', models.CharField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='Lecturer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('firstname', models.CharField(max_length=50)),
                ('othername', models.CharField(max_length=50)),
                ('surname', models.CharField(max_length=50)),
                ('idnumber', models.IntegerField(unique=True)),
                ('dateOfBirth', models.DateField()),
                ('department', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='base.department')),
            ],
        ),
        migrations.CreateModel(
            name='School',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('schoolName', models.CharField(max_length=200)),
                ('faculty', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.DO_NOTHING, to='base.faculty')),
            ],
        ),
        migrations.CreateModel(
            name='StaffDepartment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('department', models.CharField(max_length=100)),
                ('departmentCode', models.CharField(max_length=5)),
            ],
        ),
        migrations.CreateModel(
            name='Timetable',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='base.course')),
            ],
        ),
        migrations.CreateModel(
            name='TimetableDay',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day', models.CharField(choices=[('MONDAY', 'MONDAY'), ('TUESDAY', 'TUESDAY'), ('WEDNESDAY', 'WEDNESDAY'), ('THURSDAY', 'THURSDAY'), ('FRIDAY', 'FRIDAY')], max_length=10)),
                ('base', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='base.timetable')),
            ],
        ),
        migrations.CreateModel(
            name='Units',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('unitName', models.CharField(max_length=200)),
                ('unitCode', models.CharField(max_length=8)),
            ],
        ),
        migrations.CreateModel(
            name='TimeTableEntity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.CharField(choices=[('7:00-9:00', '7:00-9:00'), ('9:00-11:00', '9:00-11:00'), ('11:00-1:00', '11:00-1:00'), ('1:00-2:00', '1:00-2:00'), ('2:00-4:00', '2:00-4:00'), ('4:00-6:00', '4:00-6:00')], max_length=20)),
                ('room', models.CharField(max_length=10)),
                ('entity', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='base.timetableday')),
                ('lecturer', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='base.lecturer')),
                ('unit', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='base.units')),
            ],
        ),
        migrations.CreateModel(
            name='SupportStaff',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('firstname', models.CharField(max_length=50)),
                ('otherme', models.CharField(max_length=50)),
                ('surname', models.CharField(blank=True, max_length=50)),
                ('idnumber', models.IntegerField(blank=True, unique=True)),
                ('dateOfBirth', models.DateField()),
                ('password', models.IntegerField(default=12345678)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('residence', models.CharField(max_length=50)),
                ('religion', models.CharField(max_length=50)),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female'), ('O', 'Other')], default='O', max_length=1)),
                ('avatar', models.CharField(max_length=200)),
                ('department', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='base.staffdepartment')),
            ],
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('firstname', models.CharField(max_length=50)),
                ('otherme', models.CharField(max_length=50)),
                ('surname', models.CharField(blank=True, max_length=50)),
                ('idnumber', models.IntegerField(blank=True, unique=True)),
                ('dateOfBirth', models.DateField()),
                ('password', models.IntegerField(default=12345678)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('residence', models.CharField(max_length=50)),
                ('religion', models.CharField(default='Christian', max_length=50)),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female'), ('O', 'Other')], default='O', max_length=1)),
                ('avatar', models.ImageField(null=True, upload_to='student_avatars')),
                ('regNumber', models.SlugField(blank=True, null=True, unique=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='base.course')),
                ('department', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='base.department')),
                ('faculty', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='base.faculty')),
                ('school', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='base.school')),
            ],
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(max_length=500)),
                ('image', models.ImageField(upload_to='')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('verified', models.BooleanField(default=False)),
                ('likes', models.IntegerField()),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='base.student')),
            ],
        ),
        migrations.CreateModel(
            name='Library',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dateJoined', models.DateField(auto_now_add=True)),
                ('dateOfReturn', models.DateField()),
                ('bookBorrowed', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='base.book')),
                ('issuedBy', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='base.supportstaff')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='base.student')),
            ],
        ),
        migrations.CreateModel(
            name='Fees',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('paymentTime', models.DateTimeField(auto_now_add=True, null=True)),
                ('paymentMethod', models.CharField(choices=[('MOBILE', 'MOBILE'), ('CHEQUE', 'CHEQUE'), ('CASH', 'CASH')], default='CHEQUE', max_length=20)),
                ('paymentCode', models.CharField(max_length=30)),
                ('cashier', models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='base.supportstaff')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='base.student')),
            ],
        ),
        migrations.CreateModel(
            name='Examinations',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('marks', models.IntegerField(max_length=2)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='base.student')),
                ('unit', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='base.units')),
            ],
        ),
        migrations.AddField(
            model_name='department',
            name='school',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='base.school'),
        ),
        migrations.AddField(
            model_name='course',
            name='department',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='base.department'),
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment', models.TextField(max_length=200)),
                ('verified', models.BooleanField(default=False)),
                ('commentedBy', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='base.student')),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.post')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
